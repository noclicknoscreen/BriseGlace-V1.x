{
  "_from": "node-record-lpcm16",
  "_id": "node-record-lpcm16@0.3.0",
  "_inBundle": false,
  "_integrity": "sha1-eX63DFCdtOmCoyFiFHp7rjTqrMo=",
  "_location": "/node-record-lpcm16",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "node-record-lpcm16",
    "fetchSpec": "latest",
    "name": "node-record-lpcm16",
    "raw": "node-record-lpcm16",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/node-record-lpcm16/-/node-record-lpcm16-0.3.0.tgz",
  "_shasum": "797eb70c509db4e982a32162147a7bae34eaacca",
  "_spec": "node-record-lpcm16",
  "_where": "/Users/sebastien_albert/MEGA/Projets/2017.11.20_BriseGlace/Repos/BriseGlace-V1.x/V1.0/ServeurGoogleSpeech",
  "author": {
    "name": "Gilles De Mey"
  },
  "bugs": {
    "url": "https://github.com/gillesdemey/node-record-lpcm16/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Records a 16-bit signed-integer linear pulse modulation code WAV audio file.",
  "devDependencies": {},
  "directories": {
    "example": "examples"
  },
  "homepage": "https://github.com/gillesdemey/node-record-lpcm16",
  "keywords": [
    "audio",
    "record",
    "sox",
    "speech"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "node-record-lpcm16",
  "optionalDependencies": {},
  "readme": "# node-record-lpcm-16\n\nRecords a 16-bit signed-integer linear pulse modulation code WAV audio file.\n\nThis module uses Node.js streams to minimize memory usage and optimize speed, perfect for embedded devices and \"the internet of things\".\n\nThese audio files are fully compatible with both the [Google Speech to Text API (v2)](https://github.com/gillesdemey/google-speech-v2) and the [Wit.ai Speech API](https://wit.ai/docs/api#span-classtitle-verb-postspeech).\n\n## Installation\n\n`npm install node-record-lpcm16`\n\n## Dependencies\n\nGenerally, running `npm install` should suffice.\n\nThis module requires you to install [SoX](http://sox.sourceforge.net) and it must be available in your `$PATH`.\n\n### For Mac OS\n`brew install sox`\n\n### For most linux disto's\n`sudo apt-get install sox libsox-fmt-all`\n\n### For Windows\n[download the binaries](http://sourceforge.net/projects/sox/files/latest/download)\n\n## Options\n\n```\nsampleRate    : 16000  // audio sample rate\nthreshold     : 0.5    // silence threshold (rec only)\nthresholdStart: null   // silence threshold to start recording, overrides threshold (rec only)\nthresholdEnd  : null   // silence threshold to end recording, overrides threshold (rec only)\nsilence       : '1.0'  // seconds of silence before ending\nverbose       : false  // log info to the console\nrecordProgram : 'rec'  // Defaults to 'rec' - also supports 'arecord' and 'sox'\ndevice        : null   // recording device (e.g.: 'plughw:1')\n```\n\n> Please note that `arecord` might not work on all operating systems. If you can't capture any sound with `arecord`, try to change device (`arecord -l`).\n\n## Usage\n\n```javascript\nvar record = require('node-record-lpcm16')\nvar fs = require('fs')\n\nvar file = fs.createWriteStream('test.wav', { encoding: 'binary' })\n\nrecord.start({\n  sampleRate : 44100,\n  verbose : true\n})\n.pipe(file)\n```\n\nThe library will automatically attempt to stop when it encounters silence, if not you can stop the recording manually.\n\n```javascript\nvar record = require('node-record-lpcm16')\nvar fs = require('fs')\n\nvar file = fs.createWriteStream('test.wav', { encoding: 'binary' })\n\nrecord.start().pipe(file)\n\n// Stop recording after three seconds\nsetTimeout(function () {\n  record.stop()\n}, 3000)\n```\nThis module uses Node.js streams, if you're unfamiliar with them I'd suggest reading Substack's excellent [stream handbook](https://github.com/substack/stream-handbook).\n\n## Example\n\nHere's how you can write your own Siri in just 10 lines of code.\n\n```javascript\nvar rec = require('node-record-lpcm16')\nvar request = require('request')\n\nvar witToken = process.env.WIT_TOKEN; // get one from wit.ai!\n\nexports.parseResult = function (err, resp, body) {\n  console.log(body)\n}\n\nrec.start().pipe(request.post({\n  'url'     : 'https://api.wit.ai/speech?client=chromium&lang=en-us&output=json',\n  'headers' : {\n    'Accept'        : 'application/vnd.wit.20160202+json',\n    'Authorization' : 'Bearer ' + witToken,\n    'Content-Type'  : 'audio/wav'\n  }\n}, exports.parseResult))\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/gillesdemey/node-record-lpcm16.git"
  },
  "scripts": {},
  "version": "0.3.0"
}
